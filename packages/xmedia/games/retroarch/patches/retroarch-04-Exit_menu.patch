diff -Naurp retroarch-ab00d58/command.c retroarch-ab00d58-patch/command.c
--- retroarch-ab00d58/command.c	2018-04-02 02:57:27.000000000 +0300
+++ retroarch-ab00d58-patch/command.c	2018-04-12 11:04:12.000000000 +0300
@@ -18,6 +18,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <ctype.h>
+#include <fcntl.h>
 
 #include <compat/strl.h>
 #include <compat/posix_string.h>
@@ -1811,7 +1812,7 @@ bool command_event(enum event_command cm
       case CMD_EVENT_LOAD_CORE:
          command_event(CMD_EVENT_LOAD_CORE_PERSIST, NULL);
 #ifndef HAVE_DYNAMIC
-         command_event(CMD_EVENT_QUIT, NULL);
+         retroarch_main_quit();
 #endif
          break;
       case CMD_EVENT_LOAD_STATE:
@@ -1925,7 +1926,15 @@ bool command_event(enum event_command cm
          }
          break;
       case CMD_EVENT_QUIT:
-         return retroarch_main_quit();
+         {
+            bool ra_quit = retroarch_main_quit();
+            /* exit to Kodi */
+            remove("/var/lock/start.retro");
+            creat("/var/lock/start.kodi", S_IRUSR|S_IROTH);
+            system("systemctl start kodi.service");
+            system("systemctl stop retroarch.service");
+            return ra_quit;
+         }
       case CMD_EVENT_CHEEVOS_HARDCORE_MODE_TOGGLE:
 #ifdef HAVE_CHEEVOS
          cheevos_toggle_hardcore_mode();
@@ -2283,20 +2292,16 @@ TODO: Add a setting for these tweaks */
          }
          break;
       case CMD_EVENT_SHUTDOWN:
-#if defined(__linux__) && !defined(ANDROID)
          runloop_msg_queue_push(msg_hash_to_str(MSG_VALUE_SHUTTING_DOWN), 1, 180, true);
          command_event(CMD_EVENT_MENU_SAVE_CURRENT_CONFIG, NULL);
-         command_event(CMD_EVENT_QUIT, NULL);
-         system("shutdown -P now");
-#endif
+         retroarch_main_quit();
+         system("systemctl poweroff");
          break;
       case CMD_EVENT_REBOOT:
-#if defined(__linux__) && !defined(ANDROID)
          runloop_msg_queue_push(msg_hash_to_str(MSG_VALUE_REBOOTING), 1, 180, true);
          command_event(CMD_EVENT_MENU_SAVE_CURRENT_CONFIG, NULL);
-         command_event(CMD_EVENT_QUIT, NULL);
-         system("shutdown -r now");
-#endif
+         retroarch_main_quit();
+         system("systemctl reboot");
          break;
       case CMD_EVENT_RESUME:
          rarch_menu_running_finished();
@@ -2355,7 +2360,7 @@ TODO: Add a setting for these tweaks */
          if (!frontend_driver_set_fork(FRONTEND_FORK_RESTART))
             return false;
 #ifndef HAVE_DYNAMIC
-         command_event(CMD_EVENT_QUIT, NULL);
+         retroarch_main_quit();
 #endif
          break;
       case CMD_EVENT_MENU_SAVE_CURRENT_CONFIG:
diff -Naurp retroarch-ab00d58/menu/menu_setting.c retroarch-ab00d58-patch/menu/menu_setting.c
--- retroarch-ab00d58/menu/menu_setting.c	2018-04-02 02:57:27.000000000 +0300
+++ retroarch-ab00d58-patch/menu/menu_setting.c	2018-04-12 11:07:40.000000000 +0300
@@ -2503,19 +2503,6 @@ static bool setting_append_list(
                parent_group);
          settings_data_list_current_add_flags(list, list_info, SD_FLAG_LAKKA_ADVANCED);
 
-#if !defined(IOS)
-         /* Apple rejects iOS apps that let you forcibly quit them. */
-         CONFIG_ACTION(
-               list, list_info,
-               MENU_ENUM_LABEL_QUIT_RETROARCH,
-               MENU_ENUM_LABEL_VALUE_QUIT_RETROARCH,
-               &group_info,
-               &subgroup_info,
-               parent_group);
-         menu_settings_list_current_add_cmd(list, list_info, CMD_EVENT_QUIT);
-#endif
-
-#if defined(HAVE_LAKKA)
          CONFIG_ACTION(
                list, list_info,
                MENU_ENUM_LABEL_REBOOT,
@@ -2533,7 +2520,15 @@ static bool setting_append_list(
                &subgroup_info,
                parent_group);
          menu_settings_list_current_add_cmd(list, list_info, CMD_EVENT_SHUTDOWN);
-#endif
+
+         CONFIG_ACTION(
+               list, list_info,
+               MENU_ENUM_LABEL_QUIT_RETROARCH,
+               MENU_ENUM_LABEL_VALUE_QUIT_RETROARCH,
+               &group_info,
+               &subgroup_info,
+               parent_group);
+         menu_settings_list_current_add_cmd(list, list_info, CMD_EVENT_QUIT);
 
          CONFIG_ACTION(
                list, list_info,
diff -Naurp retroarch-ab00d58/intl/msg_hash_ru.h retroarch-ab00d58-patch/intl/msg_hash_ru.h
--- retroarch-ab00d58/intl/msg_hash_ru.h	2018-04-12 12:10:02.000000000 +0300
+++ retroarch-ab00d58-patch/intl/msg_hash_ru.h	2018-04-12 12:16:26.000000000 +0300
@@ -1227,7 +1227,7 @@ MSG_HASH(MENU_ENUM_LABEL_VALUE_RDB_ENTRY
 MSG_HASH(MENU_ENUM_LABEL_VALUE_RDB_ENTRY_TGDB_RATING,
       "Рейтинг TGDB")
 MSG_HASH(MENU_ENUM_LABEL_VALUE_REBOOT,
-      "Перезагрузить")
+      "Перезагрузить систему")
 MSG_HASH(MENU_ENUM_LABEL_VALUE_RECORDING_CONFIG_DIRECTORY,
       "Конфигурация записи")
 MSG_HASH(MENU_ENUM_LABEL_VALUE_RECORDING_OUTPUT_DIRECTORY,
@@ -1351,7 +1351,7 @@ MSG_HASH(MENU_ENUM_LABEL_VALUE_SHOW_ADVA
 MSG_HASH(MENU_ENUM_LABEL_VALUE_SHOW_HIDDEN_FILES,
       "Показать скрытые файлы и папки")
 MSG_HASH(MENU_ENUM_LABEL_VALUE_SHUTDOWN,
-      "Неисправность")
+      "Выключить систему")
 MSG_HASH(MENU_ENUM_LABEL_VALUE_SLOWMOTION_RATIO,
       "Коэффициент замедленного движения ")
 MSG_HASH(MENU_ENUM_LABEL_VALUE_SORT_SAVEFILES_ENABLE,
@@ -2524,7 +2524,7 @@ MSG_HASH(MENU_ENUM_SUBLABEL_NETWORK_INFO
 MSG_HASH(MENU_ENUM_SUBLABEL_SYSTEM_INFORMATION,
       "Показать информацию, относящуюся к устройству.")
 MSG_HASH(MENU_ENUM_SUBLABEL_QUIT_RETROARCH,
-      "Закрыть программу.")
+      "Закрыть программу и запустить Kodi.")
 MSG_HASH(MENU_ENUM_SUBLABEL_VIDEO_WINDOW_WIDTH,
       "Изменить размер ширины для окна дисплея. Если вы поменяете параметр на 0, то программа будет пытаться масштабировать окно как можно больше.")
 MSG_HASH(MENU_ENUM_SUBLABEL_VIDEO_WINDOW_HEIGHT,
diff -Naurp retroarch-ab00d58/retroarch.c retroarch-ab00d58-patch/retroarch.c
--- retroarch-ab00d58/retroarch.c	2018-04-02 02:57:27.000000000 +0300
+++ retroarch-ab00d58-patch/retroarch.c	2018-04-12 12:36:57.000000000 +0300
@@ -171,7 +171,8 @@ enum  runloop_state
    RUNLOOP_STATE_SLEEP,
    RUNLOOP_STATE_MENU_ITERATE,
    RUNLOOP_STATE_END,
-   RUNLOOP_STATE_QUIT
+   RUNLOOP_STATE_QUIT,
+   RUNLOOP_STATE_RESTART
 };
 
 typedef struct runloop_ctx_msg_info
@@ -2579,7 +2580,7 @@ static enum runloop_state runloop_check_
             {
                old_quit_key                 = quit_key;
                retroarch_main_quit();
-               return RUNLOOP_STATE_QUIT;
+               return RUNLOOP_STATE_RESTART;
             }
 
             /* Loads dummy core instead of exiting RetroArch completely.
@@ -2591,7 +2592,7 @@ static enum runloop_state runloop_check_
          {
             old_quit_key                 = quit_key;
             retroarch_main_quit();
-            return RUNLOOP_STATE_QUIT;
+            return RUNLOOP_STATE_RESTART;
          }
       }
    }
@@ -3209,6 +3210,10 @@ int runloop_iterate(unsigned *sleep_ms)
          frame_limit_last_time = 0.0;
          command_event(CMD_EVENT_QUIT, NULL);
          return -1;
+      case RUNLOOP_STATE_RESTART:
+         frame_limit_last_time = 0.0;
+         command_event(CMD_EVENT_RESTART_RETROARCH, NULL);
+         return -1;
       case RUNLOOP_STATE_POLLED_AND_SLEEP:
          runloop_netplay_pause();
          *sleep_ms = 10;
